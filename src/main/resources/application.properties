server.address=localhost
server.port=8080

# API 호출시, SQL 문을 콘솔에 출력한다.
spring.jpa.show-sql=true

# DDL 정의시 데이터베이스의 고유 기능을 사용합니다.
# ex) 테이블 생성, 삭제 등
spring.jpa.generate-ddl=true

# MySQL 을 사용할 것.
spring.jpa.database=mysql

# MySQL 설정
# local
#spring.datasource.url=jdbc:mysql://localhost:3306/everyday?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
#spring.datasource.username=root
#spring.datasource.password=1234
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# oracle1 (server)
spring.datasource.url=jdbc:mysql://193.122.102.241:3306/everyday?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false&useSSL=false
spring.datasource.username=root
spring.datasource.password=Oracle12#$
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# MySQL 상세 지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

# Log
logging.level.root=warn
logging.level.com.everyday=debug

#jwt
jwt.secret=jwtsecretkey

# table camel-case로 생성
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# db schema handling
# create: 기존 테이블 삭제 후 새로 생성
# create-drop: 기존 테이블 삭제 후 새로 생성 + 어플리케이션 종료시 DDL 제거
# update: 테이블과 엔티티 매핑정보 비교 후 변경내용만 반영
# validate: (권장) 테이블과 엔티티 매핑정보 비교 후 변경사항 있는 경우 경고 출력. 어플리케이션 실행
#spring.jpa.hibernate.ddl-auto=validate

# file path
filePathUrl =/Users/moonsungsoo/gitlab/file/
